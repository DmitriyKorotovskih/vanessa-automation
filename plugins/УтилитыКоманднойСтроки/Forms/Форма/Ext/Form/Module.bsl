&НаКлиенте
Перем Ванесса;

&НаКлиенте
Перем ПотокВыводаКодировка;

// { Plugin interface
&НаКлиенте
Процедура УстановитьСлужебныеПеременные(КонтекстФреймворка) Экспорт
	Ванесса = КонтекстФреймворка;
КонецПроцедуры

&НаКлиенте
Функция ОписаниеПлагина(ВозможныеТипыПлагинов) Экспорт
	Возврат ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов);
КонецФункции

&НаСервере
Функция ОписаниеПлагинаНаСервере(ВозможныеТипыПлагинов)
	Возврат РеквизитФормыВЗначение("Объект").ОписаниеПлагина(ВозможныеТипыПлагинов);
КонецФункции
// } Plugin interface

#Область УтилитыКоманнойСтроки

#Область йцу

#КонецОбласти

#Область ПотокВывода

// Получает вывод команды, 
//
// Параметры:
//  СтрокаКоманды           - Строка, Массив - Командная строка для запуска приложения 
//  ДополнительныеПараметры - Структура - Произвольные параметры 
// 
// Возвращаемое значение:
//  Строка - Вывод приложения
//
&НаКлиенте
Функция ВыводКакСтрока(СтрокаКоманды, КодировкаТекста = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Перем ПотокВывода;
	
	ДопПараметры = ОбъединитьСтруктуры(КомандаСистемыДопПараметры(), ДополнительныеПараметры);
	ДопПараметры.Проверить = Истина;
	Если КодировкаТекста <> Неопределено Тогда
		ДопПараметры.КодировкаТекста = КодировкаТекста;	
	КонецЕсли;
	
	КомандаСистемы_(СтрокаКоманды,, Истина,, ПотокВывода,, ДопПараметры);
	
	Возврат ПотокКакСтрока(ПотокВывода, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область КомандаСистемы

// Запускает команду в командной обочке, аналогично КомандаСистемы, реализуя при этом всякое 
//
// Параметры:
//  СтрокаКоманды           - Строка, Массив - Командная строка для запуска приложения
//  ТекущийКаталог          - Строка - Задает текущий каталог запускаемого приложения
//  ДождатьсяЗавершения     - Булево - Дожидаться завершения запущенного приложения перед продолжением работы
//  КодВозврата             - Число, Неопределено - содержит код завершения работы системы
//	ДополнительныеПараметры - Структура - Произвольные параметры
//
&НаКлиенте
Процедура КомандаСистемы_(СтрокаКоманды, ТекущийКаталог = "", ДождатьсяЗавершения = Ложь, КодВозврата = Неопределено, 
	ПотокВывода = Неопределено, ПотокОшибок = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДопПараметры = ОбъединитьСтруктуры(КомандаСистемыДопПараметры(), ДополнительныеПараметры);
	
	Если ТипПлатформыWindows() Тогда
		
		КомандаСистемыWindows(
			СтрокаКоманды, 
			ТекущийКаталог, 
			ДождатьсяЗавершения, 
			КодВозврата, 
			ПотокВывода,
			ПотокОшибок,
			ДопПараметры); 
		
	Иначе
		
		КомандаСистемыPOSIX(
			СтрокаКоманды, 
			ТекущийКаталог, 
			ДождатьсяЗавершения, 
			КодВозврата, 
			ПотокВывода,
			ПотокОшибок,
			ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КомандаСистемыPOSIX(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата, 
	ПотокВывода, ПотокОшибок, ДопПараметры)
		
	Исполнитель = "/bin/sh";
	
	Команда = Новый Массив;
	Команда.Добавить(ДопПараметры.Оболочка);
	Команда.Добавить("-c");
	Команда.Добавить(ПолучитьКоманднуюСтрокуИзМассиваWindows(СтрокаКоманды));
	
	КомандаСистемыПередЗапускомПриложения(Команда, ДождатьсяЗавершения, ДопПараметры);
		
	СтрокаКоманды = ПолучитьКоманднуюСтрокуИзМассиваWindows(Команда);

	ЗапуститьПриложение(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата);
	
	КомандаСистемыПослеЗапускаПриложения(Команда, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата, 
		ПотокВывода, ПотокОшибок, ДопПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КомандаСистемыWindows(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата, 
	ПотокВывода, ПотокОшибок, ДопПараметры)
	
	ДождатьсяЗавершения = ДождатьсяЗавершения Или ДопПараметры.Проверить;
	
	Команда = Новый Массив;
	Команда.Добавить(ДопПараметры.Оболочка);
	Команда.Добавить("/C");
	Команда.Добавить(ПолучитьКоманднуюСтрокуИзМассиваWindows(СтрокаКоманды));
	
	КомандаСистемыПередЗапускомПриложения(Команда, ДождатьсяЗавершения, ДопПараметры);
	
	СтрокаКоманды = ПолучитьКоманднуюСтрокуИзМассиваWindows(Команда);	
	ЗапуститьПриложение(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата);
	
	КомандаСистемыПослеЗапускаПриложения(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата, 
		ПотокВывода, ПотокОшибок, ДопПараметры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КомандаСистемыПередЗапускомПриложения(Команда, ДождатьсяЗавершения, ДопПараметры)
	
	Если ДождатьсяЗавершения Или ДопПараметры.Проверить Тогда
		ДопПараметры.ПотокВыводаФайл = Новый Файл(ПолучитьИмяВременногоФайла());
		ДопПараметры.ПотокОшибокФайл = Новый Файл(ПолучитьИмяВременногоФайла());
		Команда.Добавить("1>");
		Команда.Добавить(ДопПараметры.ПотокВыводаФайл.ПолноеИмя);
		Команда.Добавить("2>");
		Команда.Добавить(ДопПараметры.ПотокОшибокФайл.ПолноеИмя);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КомандаСистемыПослеЗапускаПриложения(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, КодВозврата, 
	ПотокВывода, ПотокОшибок, ДопПараметры)
	
	Если ДождатьсяЗавершения Тогда		
		ПотокВывода = Новый ДвоичныеДанные(ДопПараметры.ПотокВыводаФайл.ПолноеИмя);
		ПотокОшибок = Новый ДвоичныеДанные(ДопПараметры.ПотокОшибокФайл.ПолноеИмя);
		УдалитьФайлы(ДопПараметры.ПотокВыводаФайл.ПолноеИмя);
		УдалитьФайлы(ДопПараметры.ПотокОшибокФайл.ПолноеИмя);
	КонецЕсли;
	
	Если ДопПараметры.Проверить И КодВозврата <> 0 Тогда
		ВызватьИсключение ОшибкаВызоваПриложения(
		КодВозврата, ТекущийКаталог, СтрокаКоманды, ПотокВывода, ПотокОшибок, ДопПараметры);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КомандаСистемыДопПараметры()
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Проверить", Ложь);
	ДопПараметры.Вставить("ПотокВыводаКодировка", КодировкаТекстаПоУмолчанию());
	ДопПараметры.Вставить("ПотокВыводаФайл", Неопределено);
	ДопПараметры.Вставить("ПотокОшибокКодировка", КодировкаТекстаПоУмолчанию());
	ДопПараметры.Вставить("ПотокОшибокФайл", Неопределено);
	ДопПараметры.Вставить("Оболочка", ОболочкаПоУмолчанию());
	
	Возврат ДопПараметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Служебные

&НаКлиентеНаСервереБезКонтекста
Функция ТипПлатформыWindows()
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		Или СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКоманднуюСтрокуИзМассиваPOSIX(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		ВызватьИсключение "ОшибкаЗначения: Не предполагаемое значение параметра №1";
	КонецЕсли;
	
	// Хз, как правильно
	
	Пробел = " ";
	Кавычка = """";
	
	Результат = Новый Массив;	
	Для Каждого Аргумент Из Значение Цикл
		
		Если Результат.Количество() Тогда
			Результат.Добавить(Пробел);	
		КонецЕсли;		
		
		НужныКавычки = Найти(Аргумент, Пробел) 
			Или Найти(Аргумент, Символы.Таб) 
			Или НЕ ЗначениеЗаполнено(Аргумент);
		
		Если НужныКавычки Тогда
			Результат.Добавить(Кавычка);
		КонецЕсли;		
		
		Результат.Добавить(Аргумент);
		
		Если НужныКавычки Тогда
			Результат.Добавить(Кавычка);
		КонецЕсли;			
		
	КонецЦикла;	
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКоманднуюСтрокуИзМассиваWindows(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	
	Если ТипЗнч(Значение) <> Тип("Массив") Тогда
		ВызватьИсключение "ОшибкаЗначения: Не предполагаемое значение параметра №1";
	КонецЕсли;
	
	Пробел = " ";
	Бекслеш = "\";
	Кавычка = """";
	
	Результат = Новый Массив;
	НужныКавычки = Ложь;
	
	Для Каждого Аргумент Из Значение Цикл
		
		БекслешМассив = Новый Массив;
		
		Если Результат.Количество() Тогда
			Результат.Добавить(Пробел);	
		КонецЕсли;
		
		НужныКавычки = Найти(Аргумент, Пробел) 
			Или Найти(Аргумент, Символы.Таб) 
			Или НЕ ЗначениеЗаполнено(Аргумент);
		
		Если НужныКавычки Тогда
			Результат.Добавить(Кавычка);		
		КонецЕсли;		
		
		Для Сч = 1 По СтрДлина(Аргумент) Цикл
			
			Символ = Сред(Аргумент, Сч, 1);
			Если Символ = Бекслеш Тогда
				БекслешМассив.Добавить(Символ);
			ИначеЕсли Символ = Кавычка Тогда
				БекслешДвойной = 2;
				БекслешСтрока = "";
				Пока СтрДлина(БекслешСтрока) <> СтрДлина(Бекслеш) * БекслешМассив.Количество() * БекслешДвойной Цикл
					БекслешСтрока = БекслешСтрока + Бекслеш;	
				КонецЦикла;
				БекслешМассив = Новый Массив;
				Результат.Добавить(БекслешСтрока);
				Результат.Добавить(Бекслеш + Кавычка);
			Иначе
				Для Каждого Элемент Из БекслешМассив Цикл
					Результат.Добавить(Элемент);	
				КонецЦикла;
				БекслешМассив = Новый Массив;
				Результат.Добавить(Символ);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Для Каждого Элемент Из БекслешМассив Цикл
			Результат.Добавить(Элемент);	
		КонецЦикла;
		
		Если НужныКавычки Тогда
			Для Каждого Элемент Из БекслешМассив Цикл
				Результат.Добавить(Элемент);	
			КонецЦикла;
			Результат.Добавить(Кавычка);
		КонецЕсли;			
		
	КонецЦикла;
	
	Возврат СтрСоединить(Результат);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбъединитьСтруктуры(Структура1 = Неопределено, Структура2 = Неопределено) Экспорт
	
	МутабельныеТипы = Новый Массив;
	МутабельныеТипы.Добавить(Тип("Структура"));
	МутабельныеТипы.Добавить(Тип("Соответствие"));
	
	ИммутабельныеТипы = Новый Массив;
	ИммутабельныеТипы.Добавить(Тип("ФиксированнаяСтруктура"));
	ИммутабельныеТипы.Добавить(Тип("ФиксированноеСоответствие"));
	
	Тип1 = МутабельныеТипы.Найти(ТипЗнч(Структура1)) <> Неопределено;
	Тип2 = МутабельныеТипы.Найти(ТипЗнч(Структура2)) <> Неопределено 
	ИЛИ ИммутабельныеТипы.Найти(ТипЗнч(Структура2)) <> Неопределено;
	
	Если Не Тип1 И Не Тип2 Тогда
		Возврат Новый Структура;	
	ИначеЕсли Тип1 И НЕ Тип2 Тогда
		Возврат Структура1; 
	ИначеЕсли НЕ Тип1 И Тип2 Тогда
		Возврат Структура2;
	Иначе
		Для Каждого Элемент Из Структура2 Цикл
			Структура1.Вставить(Элемент.Ключ, Элемент.Значение);	
		КонецЦикла;
		Возврат Структура1;
	КонецЕсли;
	
	ВызватьИсключение "Что-то пошло не так";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОшибкаВызоваПриложения(Команда, ТекущийКаталог = "", КодВозврата = 1, 
	ПотокВывода = Неопределено, ПотокОшибок = Неопределено, ДополнительныеПараметры = Неопределено)
	
	ОписаниеИсключения = 
	"ОшибкаВызоваПриложения:
	|	КодВозврата: %1
	|	СтрокаКоманды: %2
	|	ТекущийКаталог: %3
	|	ПотокВывода: %4";
	
	Строка = ПотокКакСтрока(ПотокВывода, ДополнительныеПараметры) + ПотокКакСтрока(ПотокОшибок, ДополнительныеПараметры);
	Возврат СтрШаблон(ОписаниеИсключения, КодВозврата, Команда, ТекущийКаталог, Строка);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПотокКакСтрока(ПотокВывода, ДополнительныеПараметры)
	
	Перем Результат;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПотокВыводаКодировка", КодировкаТекста.UTF8);
	ДопПараметры = ОбъединитьСтруктуры(ДопПараметры, ДополнительныеПараметры);		
	
	Если ТипЗнч(ПотокВывода) = Тип("ДвоичныеДанные") Тогда
		Результат = ПолучитьСтрокуИзДвоичныхДанных(ПотокВывода, "cp866");  	
	КонецЕсли;	
	
	Возврат Результат; 
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодировкаТекстаПоУмолчанию()
	
	Если ТипПлатформыWindows() Тогда
		Возврат "cp866"; 
	Иначе
		Возврат "utf-8";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОболочкаПоУмолчанию()
	
	Если ТипПлатформыWindows() Тогда
		Возврат "C:\WINDOWS\system32\cmd.exe"; 
	Иначе
		Возврат "/bin/sh";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Форма

&НаКлиенте
Процедура Тест_ВыводКакСтрока(Команда)
	
	Если ТипПлатформыWindows() Тогда
		Результат = ВыводКакСтрока("netstat -ano"); 
	Иначе
		Результат = ВыводКакСтрока("ss -tuwan4 2>/dev/null | awk '{print $5}' | grep ':' | cut -d "":"" -f 2 | sort | uniq");
	КонецЕсли;
	
	Сообщить(Результат);
	
КонецПроцедуры

#КонецОбласти